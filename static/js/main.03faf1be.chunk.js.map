{"version":3,"sources":["components/Table.js","components/Filters.js","components/Searchotron.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","src","children","picture","name","age","email","Filters","onClick","click","className","text","Searchotron","onChange","employeeSearch","type","placeholder","App","employeeList","useEffect","getEmployees","axios","get","then","res","randomUser","data","results","console","log","forEach","user","push","first","last","dob","thumbnail","setEmployee","catch","err","useState","employee","search","setSearch","matchingEmployees","filter","emp","length","includes","e","target","value","style","paddingBottom","display","justifyContent","alignItems","backgroundColor","sort","a","b","scope","map","id","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.03faf1be.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Table = (props) => {\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <img src={props.children.picture}></img>\r\n            </td>\r\n            <td>{props.children.name}</td>\r\n            <td>{props.children.age}</td>\r\n            <td>{props.children.email}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\n\r\nconst Filters = (props) => {\r\n    return (\r\n        <button onClick={props.click} className=\"btn btn-primary mr-2\">{props.text}</button>\r\n    )\r\n}\r\n\r\nexport default Filters\r\n","import React from 'react'\r\n\r\nconst Searchotron = (props) => {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid m-0\">\r\n            <div className=\"container\">\r\n                <h2 className=\"text\">Employee Search</h2>\r\n                <form>\r\n                    <div className=\"input-group\">\r\n                        <input\r\n                            onChange={props.employeeSearch}\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            placeholder=\"Try searching for an employee by name\" />\r\n                    </div>\r\n                </form>\r\n                <h6 className=\"font-italic font-weight-light\">The search is case sensitive</h6>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchotron\r\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n//Imported components\nimport Table from \"./components/Table\"\nimport Filters from \"./components/Filters\";\nimport Searchotron from \"./components/Searchotron\"\n\n\n\nfunction App() {\n\n  // Setting the empty array of employees\n  let employeeList = [];\n\n  useEffect(() => {\n    getEmployees();\n  }, [])\n\n  // Function to fill up the initialEmployeeArray with API request\n  const getEmployees = () => {\n\n    axios.get(\"https://randomuser.me/api/?results=15&nat=us\")\n      .then((res) => {\n        let randomUser = res.data.results\n        console.log(res.data.results);\n        randomUser.forEach((user) => {\n          employeeList.push({\n            name: user.name.first + \" \" + user.name.last,\n            age: user.dob.age,\n            email: user.email,\n            picture: user.picture.thumbnail\n          })\n        })\n        setEmployee([...employeeList])\n      })\n      .catch((err) => console.log(err))\n  }\n\n  // Definition of state for Employees\n  const [employee, setEmployee] = useState(employeeList)\n\n  // Definition of state for Input search\n  const [search, setSearch] = useState({\n    name: \"\",\n  });\n\n  // Function to update input state (based on user input)\n  const employeeSearch = (e) => {\n    setSearch({ ...search, name: e.target.value });\n  };\n\n\n  // Rule to filter and update employee list\n  // eslint-disable-next-line\n  const matchingEmployees = employee.filter(function (emp) {\n    if (search.name.length < 0) {\n      return employee\n    } else if (emp.name.includes(search.name)) {\n      return emp\n    }\n  });\n\n\n\n  return (\n    <div className=\"App\">\n      <Searchotron employeeSearch={employeeSearch} />\n      <div style={{ paddingBottom: 55 + 'px', display: \"flex\", justifyContent: \"center\", alignItems: \"center\", backgroundColor: \"#e9ecef\" }}>\n        <Filters text=\"Youngest First\" click={() => {\n          employee.sort((a, b) => (a.age > b.age) ? 1 : -1)\n          setEmployee([...employee])\n        }} />\n        <Filters text=\"Oldest First\" click={() => {\n          employee.sort((a, b) => (b.age > a.age) ? 1 : -1)\n          setEmployee([...employee])\n        }} />\n        <Filters text=\"Refresh employees\" click={() => {\n          getEmployees()\n          setEmployee([...employeeList])\n        }} />\n      </div>\n\n      <table className=\"table table-dark\">\n        <thead>\n          <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Age</th>\n            <th scope=\"col\">Email</th>\n          </tr>\n        </thead>\n        <tbody >\n\n          {matchingEmployees.map((employee, id) => (\n            <Table key={id}>\n              {employee}\n            </Table>\n          ))}\n\n        </tbody>\n      </table>\n    </div>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}